{"version":3,"file":"Promises.js","mappings":";;;;;;;;;;;;;AACA,gHAA4D;AAE5D,MAAM,CAAC,OAAO,GAAG,mBAAQ,CAAC;;;;;;;;;;;;;;ACF1B;IAAA;IAwCA,CAAC;IAtCc,YAAG,GAAjB,UAAkB,QAAuC;QAEtD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAM,YAAY,GAAG,EAAE,CAAC;YACxB,IAAM,MAAM,GAAG,EAAE,CAAC;YAClB,IAAI,YAAY,GAAG,CAAC,CAAC;YAErB,eAAe;YACf,KAAgB,UAAqB,EAArB,WAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAArB,cAAqB,EAArB,IAAqB,EACrC;gBADK,IAAI,GAAG;gBAEV,uBAAuB;gBACvB,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjC,oBAAoB;gBACpB,MAAM,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC;gBAC3B,0BAA0B;gBAC1B,EAAE,YAAY,CAAC;aAChB;YAED,OAAO;iBACJ,GAAG,CAAC,YAAY,CAAC;iBACjB,IAAI,CAAC,UAAC,SAAS;gBAEd,IAAM,cAAc,GAAG,EAAE,CAAC;gBAE1B,oBAAoB;gBACpB,KAAK,IAAI,KAAK,IAAI,SAAS,EAC3B;oBACE,WAAW;oBACX,iCAAiC;oBACjC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;iBAClD;gBAED,UAAU;gBACV,OAAO,OAAO,CAAC,cAAc,CAAC,CAAC;YACjC,CAAC,CAAC;iBACD,KAAK,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC,CAAC;IACJ,CAAC;IACH,eAAC;AAAD,CAAC;AAxCY,4BAAQ;;;;;;;UCDrB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://phusion/./exports/Core/Promises.ts","webpack://phusion/./src/Core/Promises/Promises.ts","webpack://phusion/webpack/bootstrap","webpack://phusion/webpack/before-startup","webpack://phusion/webpack/startup","webpack://phusion/webpack/after-startup"],"sourcesContent":["\nimport { Promises } from '../../src/Core/Promises/Promises';\n\nmodule.exports = Promises;\n","\nexport class Promises\n{\n\tpublic static all(promises: {[key: string]: Promise<any>}): Promise<{[key: string]: any}>\n  {\n    return new Promise((resolve, reject) => {\n      const promiseArray = [];\n      const keyMap = {};\n      let currentIndex = 0;\n  \n      // For each key\n      for (let key of Object.keys(promises))\n      {\n        // Add promise to array\n        promiseArray.push(promises[key]);\n        // Add key to keyMap\n        keyMap[currentIndex] = key;\n        // Increment current index\n        ++currentIndex;\n      }\n  \n      Promise\n        .all(promiseArray)\n        .then((responses) => {\n      \n          const responsesByKey = {};\n      \n          // For each response\n          for (let index in responses)\n          {\n            // Find key\n            // Set response on responsesByKey\n            responsesByKey[keyMap[index]] = responses[index];\n          }\n      \n          // Resolve\n          return resolve(responsesByKey);\n        })\n        .catch(reject);\n    })\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./exports/Core/Promises.ts\");\n",""],"names":[],"sourceRoot":""}